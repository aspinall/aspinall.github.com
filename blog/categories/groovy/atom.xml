<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: groovy | Craig Aspinall]]></title>
  <link href="http://www.craigaspinall.com/blog/categories/groovy/atom.xml" rel="self"/>
  <link href="http://www.craigaspinall.com/"/>
  <updated>2012-06-15T21:57:54+10:00</updated>
  <id>http://www.craigaspinall.com/</id>
  <author>
    <name><![CDATA[Craig Aspinall]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Extending classses at runtime with Groovy]]></title>
    <link href="http://www.craigaspinall.com/blog/2011/03/03/extending-groovy-classes-at-runtime/"/>
    <updated>2011-03-03T00:00:00+10:00</updated>
    <id>http://www.craigaspinall.com/blog/2011/03/03/extending-groovy-classes-at-runtime</id>
    <content type="html"><![CDATA[<p>I gave an introduction to Groovy at our local JUG this week and didn't quite manage to make it through all the material I wanted to cover, so I decided to add the missing content here! The part I missed out in the meetup was how to extend a class at runtime via it's metaClass.</p>

<!--more-->


<p>If you add a named closure to the metaClass of an existing class, then it essentially becomes available as a method on that class. In this example, I've added a @containsOnly(Collection anotherCollection)@ method to the @Collection@ class, which returns @true@ if two collections have the same content but not necessarily in the same order.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Collection</span><span class="o">.</span><span class="na">metaClass</span><span class="o">.</span><span class="na">containsOnly</span> <span class="o">=</span> <span class="o">{</span> <span class="n">Collection</span> <span class="n">otherCollection</span> <span class="o">-&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">delegate</span><span class="o">.</span><span class="na">containsAll</span><span class="o">(</span><span class="n">otherCollection</span><span class="o">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">delegate</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="n">otherCollection</span><span class="o">.</span><span class="na">size</span><span class="o">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="o">[</span><span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="o">[</span><span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="k">assert</span> <span class="n">a</span><span class="o">.</span><span class="na">containsOnly</span><span class="o">(</span><span class="n">b</span><span class="o">)</span>
</span><span class='line'><span class="k">assert</span> <span class="o">!</span><span class="n">b</span><span class="o">.</span><span class="na">containsOnly</span><span class="o">(</span><span class="n">c</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>@delegate@ is an implicit argument referring to the object on which the @containsOnly()@ method is being called.</p>

<p>In the following case, I have extended the @Collection@ class again to add a @choose(int numberOfElements)@ method, which selects a supplied number of elements from the collection, chosen at random. Note that the @return@ keyword is optional, I've used it here for clarity.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Collection</span><span class="o">.</span><span class="na">metaClass</span><span class="o">.</span><span class="na">choose</span> <span class="o">=</span> <span class="o">{</span> <span class="kt">int</span> <span class="n">numberOfElements</span> <span class="o">-&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">(</span><span class="n">delegate</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;=</span> <span class="n">numberOfElements</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">delegate</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span> <span class="n">previouslyUsed</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">List</span> <span class="n">chosen</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">chosen</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">numberOfElements</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">().</span><span class="na">nextInt</span><span class="o">(</span><span class="n">delegate</span><span class="o">.</span><span class="na">size</span><span class="o">())</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">previouslyUsed</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">index</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">chosen</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">delegate</span><span class="o">[</span><span class="n">index</span><span class="o">]</span>
</span><span class='line'>            <span class="n">previouslyUsed</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">index</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">chosen</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">one</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">choose</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="k">assert</span> <span class="n">one</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="k">assert</span> <span class="n">a</span><span class="o">.</span><span class="na">containsAll</span><span class="o">(</span><span class="n">one</span><span class="o">)</span>
</span><span class='line'><span class="n">five</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">choose</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span>
</span><span class='line'><span class="k">assert</span> <span class="n">five</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">5</span>
</span><span class='line'><span class="k">assert</span> <span class="n">a</span><span class="o">.</span><span class="na">containsAll</span><span class="o">(</span><span class="n">five</span><span class="o">)</span>
</span><span class='line'><span class="n">twelve</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">choose</span><span class="o">(</span><span class="mi">12</span><span class="o">)</span> <span class="c1">// should only return 10!</span>
</span><span class='line'><span class="k">assert</span> <span class="n">twelve</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">10</span>
</span><span class='line'><span class="k">assert</span> <span class="n">a</span><span class="o">.</span><span class="na">containsAll</span><span class="o">(</span><span class="n">twelve</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>My final example extends the @String@ class so that you can easily cast it to a @Date@ instance using a fixed conversion format. Groovy uses this syntax for casting (which is much nicer than Java):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="s">&quot;08/08/1988&quot;</span> <span class="n">as</span> <span class="n">Date</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Under the hood, Groovy calls the @asType(Class targetType)@ method to perform the conversion, and that already supports casting to a number of different types. To add @Date@ casting I had to replace the existing method definition. So that I didn't lose the original functionality, I captured the original method and delegated to it if we're not trying to cast to a @Date@.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">def</span> <span class="n">oldAsType</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">metaClass</span><span class="o">.</span><span class="na">getMetaMethod</span><span class="o">(</span><span class="s">&quot;asType&quot;</span><span class="o">,</span> <span class="o">[</span><span class="n">Class</span><span class="o">]</span> <span class="n">as</span> <span class="n">Class</span><span class="o">[])</span>
</span><span class='line'><span class="n">String</span><span class="o">.</span><span class="na">metaClass</span><span class="o">.</span><span class="na">asType</span> <span class="o">=</span> <span class="o">{</span> <span class="n">Class</span> <span class="n">targetType</span> <span class="o">-&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">(</span><span class="n">targetType</span> <span class="o">==</span> <span class="n">Date</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Date</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&quot;dd/MM/yyyy&quot;</span><span class="o">,</span> <span class="n">delegate</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">oldAsType</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">delegate</span><span class="o">,</span> <span class="n">targetType</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span><span class='line'><span class="c1">// Now we can call...</span>
</span><span class='line'><span class="s">&quot;08/08/1988&quot;</span> <span class="n">as</span> <span class="n">Date</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mixin it up]]></title>
    <link href="http://www.craigaspinall.com/blog/2010/11/05/mixin-it-up/"/>
    <updated>2010-11-05T00:00:00+10:00</updated>
    <id>http://www.craigaspinall.com/blog/2010/11/05/mixin-it-up</id>
    <content type="html"><![CDATA[<p>A couple of days ago I talked about using Groovy's @metaClass@ to add a method to the @Collection@ class at runtime. Today, I used Groovy's mixin mechanisms to share common functionality between two classes that don't share the same ancestry.</p>

<!--more-->


<p>In my original Java code, one of the classes was actually an inner class of the other. When I converted that code to Groovy I found that Groovy's inner class support was a little bit… iffy (at least in the sense that the behaviour is not exactly the same as Java)! So I promoted the inner class to a top level class. That left me with two functions that both classes needed to share.</p>

<p>The obvious options were copy and paste (over my dead body), try and force a common parent (inheritance), or refactor the shared functions into their own classes (composition). I felt the only reasonable option was composition, but I didn't want my new concise code being messed up with lots of indirect method calls! Having used Scala traits before I figured I would look for the Groovy equivalent.</p>

<p>My first port of call was Groovy's @mixin()@ method, which works like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Logger</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">def</span> <span class="n">log</span><span class="o">(</span><span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span> <span class="s">&quot;&amp;gt; $message&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Foo</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">mixin</span> <span class="n">Logger</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="nf">bar</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">log</span> <span class="s">&quot;Foo.bar() called&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Foo</span><span class="o">()</span>
</span><span class='line'><span class="n">foo</span><span class="o">.</span><span class="na">bar</span><span class="o">()</span> <span class="c1">// prints &quot;&gt; Foo.bar() called&quot;</span>
</span><span class='line'><span class="n">foo</span><span class="o">.</span><span class="na">log</span> <span class="s">&quot;log called directly on Foo instance!&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Perfect! Easy to implement, not too difficult to follow, and no (source code) overhead to calling the mixed in methods. I committed the code and was about to get on with the next task when I discovered another mechanism…</p>

<p>There is an @@Delegate@ annotation you can place on a field within a class. It triggers an AST transformation which injects the interface of the delegate into the enclosing class, giving me the same net result as the @mixin()@ method:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Logger</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">def</span> <span class="n">log</span><span class="o">(</span><span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span> <span class="s">&quot;&amp;gt; $message&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Delegate</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Logger</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="nf">bar</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">log</span> <span class="s">&quot;Foo.bar() called&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Foo</span><span class="o">()</span>
</span><span class='line'><span class="n">foo</span><span class="o">.</span><span class="na">bar</span><span class="o">()</span> <span class="c1">// prints &quot;&gt; Foo.bar() called&quot;</span>
</span><span class='line'><span class="n">foo</span><span class="o">.</span><span class="na">log</span> <span class="s">&quot;log called directly on Foo instance!&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I ended up going with the @@Delegate@ mechanism because the IDE (IntelliJ IDEA in my case) can resolve references to the delegated methods (because the transformation is applied at compile time) which it couldn't do using the @mixin()@ method (because it is applied at runtime). I imagine therefore, that it makes sense to use @@Delegate@ on your own classes and @mixin()@ on other peoples.</p>

<p>I didn't delve into them, but there are more mechanisms available than the two I've highlighted here. There are @@Category@ and @@Mixin@ annotations and you can roll your own AST transformations too. They might be the subject of another blog post!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is meta better?]]></title>
    <link href="http://www.craigaspinall.com/blog/2010/11/04/is-meta-better/"/>
    <updated>2010-11-04T00:00:00+10:00</updated>
    <id>http://www.craigaspinall.com/blog/2010/11/04/is-meta-better</id>
    <content type="html"><![CDATA[<p>Yesterday I did my first bit of meta-programming in production code. It wasn't anything particularly fancy, but it does extend the functionality of a class (that I didn't write) at runtime, to provide an additional function.</p>

<!--more-->


<p>There is a really handy matcher method in the "FEST-Assert":http://fest.easytesting.org/ library called @containsOnly()@, which ensures that two collections have the same contents but doesn't care about the order. Now I'm using "Spock":http://spockframework.org/, I'm trying to stick to the basic Groovy assertions because Spock uses them implicitly, they are easier to read and write, and the output when an assertion fails is excellent:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">assert</span> <span class="n">collectionA</span> <span class="o">==</span> <span class="n">collectionB</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>   <span class="o">|</span>           <span class="o">|</span>  <span class="o">|</span>
</span><span class='line'>   <span class="o">[</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">]</span>   <span class="o">|</span>  <span class="o">[</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">]</span>
</span><span class='line'>               <span class="kc">false</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The Groovy JDK already adds a whole bunch of useful methods to the stock Java collections, but there isn't a @containsOnly()@ method. However it is easy to provide the function using two of the existing methods:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">def</span> <span class="nf">containsOnly</span><span class="o">(</span><span class="n">collection</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">size</span><span class="o">()</span> <span class="o">==</span> <span class="n">collection</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">containsAll</span><span class="o">(</span><span class="n">collection</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So I added it by modifying the @metaClass@ when my code is initialized:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Collection</span><span class="o">.</span><span class="na">metaClass</span><span class="o">.</span><span class="s">&quot;containsOnly&quot;</span> <span class="o">=</span> <span class="o">{</span> <span class="n">Collection</span> <span class="n">other</span> <span class="o">-&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">size</span><span class="o">()</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">containsAll</span><span class="o">(</span><span class="n">other</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And it works beautifully. The question is whether or not it is better than trying to solve the problem some other way, such as using a proxy class or a utility class to provide the extra function? It would certainly be easier to track where the @containsOnly()@ method is defined, rather than it appearing by magic as it does with meta-programming (unless you know in advance where the metaClass extension is being done). On the flip side, it takes a lot more code to do the same using a proxy or utility class, and only a proxy would allow me to keep the API I want in this case.</p>

<p>I guess in the end it's a swings and roundabouts argument. What you gain with one you lose with the other. Both introduce some overhead to future maintenance of the code. It's just that it might not be obvious to the person that comes after you where that overhead is if you're using meta-programming!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Consoling oneself]]></title>
    <link href="http://www.craigaspinall.com/blog/2010/11/02/consoling-oneself/"/>
    <updated>2010-11-02T00:00:00+10:00</updated>
    <id>http://www.craigaspinall.com/blog/2010/11/02/consoling-oneself</id>
    <content type="html"><![CDATA[<p>The last time I used the "Groovy Console":http://groovy.codehaus.org/Groovy+Console (several years ago) it was painful, but now I have to say that it is one of the most useful tools I've come across.</p>

<!--more-->


<p>The thing I like about it is that you have an actual editor, so you can work multi-line statements. It means that you can write small classes and then refine them, which can be difficult in a genuine REPL. And because everything is there right in front of you, when you make the inevitable mistake, you can look back at what you have written and correct it far more easily.</p>

<p>In fact I've found it so useful, that I've started using it whenever I want to do a quick spike to investigate an idea, or refresh my memory about some API. It's also ridiculously easy to embed a console into your application which allows you to access everything that is on your classpath (assuming that Groovy is also on your classpath of course!):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">groovy.ui.Console</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">def</span> <span class="n">console</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Console</span><span class="o">()</span>
</span><span class='line'><span class="n">console</span><span class="o">.</span><span class="na">setVariable</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="s">&quot;bar&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">console</span><span class="o">.</span><span class="na">run</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I'm using this as a debug aid in my current project, which uses a private in-memory database initialized from another system at startup. With the embedded console, I can run the initialization and then inspect the contents of the database when queries are not behaving as expected, to quickly find and fix the cause of the problem. I've also been able to very quickly prototype new ideas, then cut and paste the code into the application proper, as a starting point for the production code. For me, being able to interactively execute code in my application at runtime has been a massive productivity boost.</p>

<p>And of course, you don't have to programming in Groovy to use it. You could just include the Groovy jar and your Console bootstrap class in a debug build of your Java project!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy baby!]]></title>
    <link href="http://www.craigaspinall.com/blog/2010/11/01/groovy-baby/"/>
    <updated>2010-11-01T00:00:00+10:00</updated>
    <id>http://www.craigaspinall.com/blog/2010/11/01/groovy-baby</id>
    <content type="html"><![CDATA[<p>For the last few weeks, I've been using "Groovy":http://groovy.codehaus.org/ (and the "Spock":http://code.google.com/p/spock/ BDD framework) on my current project at work, and after initially being reminded why I don't like dynamic programming languages, I have to admit that I'm slowly being converted.</p>

<!--more-->


<p>Those of you who know me (or have listened to the "podcast":http://www.codingbynumbers.com/) will know that I am not a big fan of dynamically typed programming languages. I like knowing the fact my code compiles makes some statement about it's correctness. Obviously it doesn't mean that your code is right, but at least stupid mistakes like typos in names are picked up by the compiler. I've always thought that people accept the compromise of dynamic typing a little too easily.</p>

<p>In the past I've used Groovy to script builds and deployments, but I've never really used it to write production code before. The reason I have turned to Groovy this time is beacuse I am building a framework that is to be used by a team of testers to write their automated tests. I need something that will allow me to take the Java code I have (which includes a simple DSL), hide all the boilerplate and remove as much punctuation as possible. I evaluated "Scala":http://www.scala-lang.org/ and Groovy and much as I like Scala, I settled on Groovy for two reasons:</p>

<h1>Groovy 1.8 includes a new "Command Expression Syntax":http://docs.codehaus.org/display/GroovyJSR/GEP+3+-+Command+Expression+based+DSL that really lends itself to the DSL I have created.</h1>

<h1>Groovy is already in use in the organisation.</h1>

<p>And really it came down to the second of those. Using Scala and the "Specs":http://code.google.com/p/specs/ BDD framework I am pretty sure that I could create something very similar, but Groovy seems like the more natural fit for the organisation.</p>

<p>When I first started transitioning the codebase to Groovy I felt a lot of pain, which I have subsequently put down to my attempts to keep the static typing where I could. Things definitely got a lot easier when I jumped off the fence and planted myself firmly in the garden of dynamic typing!</p>

<p>Another benefit of coming off the fence is that the code has become a lot more concise and less distracting (than the equivalent Java code). For example,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">retry</span><span class="o">(</span><span class="kd">final</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">action</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>became</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">def</span> <span class="nf">retry</span><span class="o">(</span><span class="n">action</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This example also shows how I've been able to eliminate the use of interfaces and classes as substitutes for closures (action is treated as a closure), and replace generics with dynamics.</p>

<p>I'm not completely sold on the dynamic typing argument yet, but I'm certainly a lot less sceptical than I was a few weeks ago. Only time will tell whether I become completely comfortable with it!</p>
]]></content>
  </entry>
  
</feed>
